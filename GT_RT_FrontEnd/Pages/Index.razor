@page "/"
@using ClassLibrary_GT_RT;
@using GT_RT_FrontEnd.Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager


<h2>Pilotos</h2>
<label for="filtroCategoria">Filtrar por Categoria:</label>
<div class="form-group col-sm-1">
    <select id="filtroCompeticao" class="form-control" @bind="@filtroCategoriaId">
        <option value="">Todos</option>
        @foreach (var categoria in Categorias)
        {
            <option value="@categoria.Id_Piloto_Categorias">@categoria.Nome_Piloto_Categoria</option>
        }
    </select >
    <button class="btn btn-primary" @onclick="FiltrarCategoria">Filtrar</button>
</div>

@if (Pilotos is not null && Pilotos.Any())
{
    <table>
        <tbody>
            @foreach (var piloto in PilotosFiltrados)
            {
                <tr>
                    <td style="position: relative; padding: 26px;">
                        @if (piloto.Foto != null)
                        {
                            <img src="data:image;base64,@Convert.ToBase64String(piloto.Foto)" alt="Foto do Piloto" style="width: 100px; height: 100px; position: absolute; top: 10px; left: -10px; border-radius: 100%; margin-right: 10px; margin-bottom: 10px;" />
                        }
                        <div style="padding-left: 120px;">
                            <a href="@($"/piloto-details/{piloto.Id_piloto}")">@piloto.Nome</a><br />
                            @piloto.Nickname
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
} 


@code {
    List<Piloto> Pilotos { get; set; } = new();
    List<Piloto> PilotosFiltrados { get; set; } = new();
    bool dataFetched = false;

    private int filtroCategoriaId { get; set; } = new();
    private List<Piloto_Categorias> Categorias { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || !dataFetched)
        {
            try
            {
                var response = await WebServiceAPI.GetPilotos();
                Pilotos = response.Where(p => !p.IsDeleted).ToList();

                Categorias = await WebServiceAPI.GetCategorias();

                dataFetched = true;
                FiltrarCategoria(); //para que inicialmente seja feito o load de todos os pilotos.
                StateHasChanged();

            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
                throw;
            }
        }
    }

    public void FiltrarCategoria()
    {
        if (filtroCategoriaId == 0)
        {
            PilotosFiltrados = Pilotos;
        }
        else
        {
            PilotosFiltrados = Pilotos.Where(x => x.Id_Piloto_Categoria == filtroCategoriaId).ToList();
        }
    }

}