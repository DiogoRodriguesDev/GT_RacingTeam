@page "/ListaDeCorridas"
@using ClassLibrary_GT_RT;
@using GT_RT_FrontEnd.Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h2>Lista de Corridas</h2>

<div class="form-group row">
    @*<label for="filtroCompeticao">Filtrar por Competicao:</label>*@
    <div class="col-sm-3">
        <select id="filtroCompeticao" class="form-control bg-transparent text-white border-0" @bind="@filtroCorridaId">
            <option class="bg-black" value="">Todas</option>
        @foreach (var competicao in Competicoes)
        {
                <option class="bg-black" value="@competicao.Id">@competicao.Nome</option>
        }
    </select>
    </div>
    <div class="col-sm-1">
        <button class="btn btn-secondary" @onclick="FiltrarCorridas">Filtrar</button>
    </div>
</div>


@if (Corridas is not null && CorridasFiltradas.Any())
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>Data</th>
                <th>Circuito</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Corrida in CorridasFiltradas)
            {
                <tr>
                    <td style="padding: 20px;"><a href="@($"/corrida-details/{Corrida.Id_corrida}")" class="link-personalizado2">@Corrida.Nome_Corrida</a></td>
                    <td style="padding: 20px;">@Corrida.Data?.ToString("dd/MM/yyyy")</td>
                    <td style="padding: 20px;">@Corrida.Circuito</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<Corrida> Corridas { get; set; } = new();
    List<Corrida> CorridasFiltradas { get; set; } = new();
    bool dataFetched = false;

    public int filtroCorridaId { get; set; } = 0;

    List<Competicao> Competicoes { get; set; } = new();


        protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await WebServiceAPI.GetCorridas();
            Corridas = response.Where(p => !p.IsDeleted).ToList();

            var response1 = await WebServiceAPI.GetCompeticoes();
            Competicoes = response1.Where(p => !p.IsDeleted).ToList();


            dataFetched = true;
            FiltrarCorridas(); //se nao meter isto aqui a pagina não faz load inicial às corridas.
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || !dataFetched)
        {
            try
            {
                var response = await WebServiceAPI.GetCorridas();
                Corridas = response.Where(p => !p.IsDeleted).ToList();

                var response1 = await WebServiceAPI.GetCompeticoes();
                Competicoes = response1.Where(p => !p.IsDeleted).ToList();


                dataFetched = true;
                FiltrarCorridas(); //se nao meter isto aqui a pagina não faz load inicial às corridas.
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
                throw;
            }
        }
    }

    private void FiltrarCorridas()
    {
        if (filtroCorridaId == 0)
        {
            CorridasFiltradas = Corridas.Where(p => !p.IsDeleted).OrderByDescending(x => x.Data).ToList();
        }
        else
        {
            CorridasFiltradas = Corridas.Where(p => p.Id_competicao == filtroCorridaId && !p.IsDeleted).ToList();
        }
    }
}