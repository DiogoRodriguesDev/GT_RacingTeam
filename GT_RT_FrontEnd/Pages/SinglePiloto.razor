@page "/piloto-details/{id:int}"

@using ClassLibrary_GT_RT
@using GT_RT_FrontEnd.Interfaces
@using System.Diagnostics
@inject IWebServiceAPI WebServiceAPI


@if (Piloto != null)
{
    <h3>@Piloto.Nome</h3>
    @if (Piloto.Foto != null)
    {
        <img src="data:image;base64,@Convert.ToBase64String(Piloto.Foto)" alt="Foto do Piloto" style="max-width: 200px; max-height: 200px;" />
    }

    <p><strong>Nickname:</strong> @Piloto.Nickname</p>
    <p><strong>ID do Piloto:</strong> @Piloto.Id_piloto</p>
    <p><strong>Descricao:</strong> @Piloto.Descricao</p>
    <p><strong>Equipa:</strong> @Piloto.Piloto_Equipa.Nome</p>
    <p><strong>País/Região:</strong> @Piloto.PaisRegiao</p>
    <p><strong>Categoria:</strong> @Piloto.Piloto_Categoria.Nome_Piloto_Categoria</p>
    <p><strong>Valor:</strong> @Piloto.Valor €</p>
}
else
{
    <p>O piloto não foi encontrado.</p>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private Piloto Piloto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Piloto = await WebServiceAPI.GetPiloto(Id);
            List<Piloto_Categorias> categorias = await WebServiceAPI.GetCategorias();
            List<Equipa> equipas = await WebServiceAPI.GetEquipas();
            Piloto.Piloto_Categoria = categorias.Find(c => c.Id_Piloto_Categorias == Piloto.Id_Piloto_Categoria);
            Piloto.Piloto_Equipa = equipas.Find(c => c.Id == Piloto.Id_Equipa);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
}