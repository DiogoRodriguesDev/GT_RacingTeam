@page "/ListaDeCompeticoes"
@using ClassLibrary_GT_RT;
@using GT_RT_FrontEnd.Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h2>Lista de Competicoes</h2>

<div class="form-group row">
    
  @*  <label for="filtroCompeticao">Filtrar por Competicao:</label>*@
    <div class="col-sm-1">
    <select id="filtroCompeticao" class="form-control bg-transparent text-white border-0" @bind="@filtroCompeticaoId">
        <option class="bg-black" value="">Todas</option>
        @foreach (var categoria in ListaCategoriasPiloto)
        {
            <option class="bg-black" value="@categoria.Id_Piloto_Categorias">@categoria.Nome_Piloto_Categoria</option>
        }
    </select>
    </div>
    <div class="col-sm-1">
    <button class="btn btn-secondary" @onclick="FiltrarCompeticao">Filtrar</button>
    </div>
</div>

@if (CompeticoesFiltradas is not null && CompeticoesFiltradas.Any())
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>Categoria</th>
                <th>Descricao</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var competicao in CompeticoesFiltradas)
            {
                <tr>
                    <td style="padding: 20px;"><a href="@($"/competicao-details/{competicao.Id}")" class="link-personalizado2">@competicao.Nome</a></td>
                    <td style="padding: 20px;">@competicao.Nome_Categoria</td>
                    <td style="padding: 20px;">@competicao.Descricao</td>
                </tr>
            }

        </tbody>
    </table>
}
else
{
    <p>Nenhuma competicao encontrada.</p>
}

@code {
    List<Competicao> Competicoes { get; set; } = new List<Competicao>();
    List<Competicao> CompeticoesFiltradas { get; set; } = new List<Competicao>();
    public int filtroCompeticaoId { get; set; }
    bool dataFetched = false;
    public List<Piloto_Categorias> ListaCategoriasPiloto { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {

            ListaCategoriasPiloto = await WebServiceAPI.GetCategorias();
            Competicoes = await WebServiceAPI.GetCompeticoes();
            Competicoes = Competicoes.Where(p => !p.IsDeleted).ToList();
            CompeticoesFiltradas = Competicoes;
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private void FiltrarCompeticao()
    {
        if (filtroCompeticaoId == 0)
        {
            CompeticoesFiltradas = Competicoes;
        }
        else
        {
            CompeticoesFiltradas = Competicoes.Where(c => c.Id_Piloto_Categoria == filtroCompeticaoId).ToList();
        }
    }

    private async Task DeleteCompeticao(int id)
    {
        try
        {
            await WebServiceAPI.DeleteCompeticao(id);
            Competicoes.RemoveAll(c => c.Id == id);
            CompeticoesFiltradas.RemoveAll(c => c.Id == id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }


}