@page "/EditarCorrida/{id:int}"
@using ClassLibrary_GT_RT;
@using GT_RT_FrontEnd.Interfaces;
@using System.Diagnostics;
@using GT_RT_FrontEnd.Components;
@inject IWebServiceAPI WebServiceAPI;
@inject NavigationManager NavigationManager;


<Modal @ref="SuccessModal" Title="Sucesso" Message="Corrida atualizada com sucesso!" />

<h2>Editar Corrida</h2>

@if (CorridaData != null)
{
    <h3>Editar Corrida</h3>

    <EditForm Model="@CorridaData" OnValidSubmit="UpdateCorrida">
        <DataAnnotationsValidator />
        <ValidationSummary />



        <div class="form-group">
            <label for="Nome_Corrida">Nome_Corrida:</label>
            <InputText id="data" class="form-control" @bind-Value="@CorridaData.Nome_Corrida" />
        </div>

        <div class="form-group">
            <label for="circuito">Circuito:</label>
            <InputText id="circuito" class="form-control" @bind-Value="@CorridaData.Circuito" />
        </div>

        <div class="form-group">
            <label for="carrosPermitidos">Carros Permitidos:</label>
            <InputText id="carrosPermitidos" class="form-control" @bind-Value="@CorridaData.CarrosPermitidos" />
        </div>

        <div class="form-group">
            <label for="tipo_Pneus">Tipo de Pneus:</label>
            <InputText id="tipo_Pneus" class="form-control" @bind-Value="@CorridaData.Tipo_Pneus" />
        </div>
        <div class="form-group">
            <label for="data">Data:</label>
            <InputDate id="data" class="form-control" @bind-Value="@CorridaData.Data" />
        </div>

        <div class="form-group">
            <label for="numeroVoltas">Número de Voltas:</label>
            <InputNumber id="numeroVoltas" class="form-control" @bind-Value="@CorridaData.NumeroVoltas" />
        </div>

        <div class="form-group">
            <label for="numeroMinutos">Número de Minutos:</label>
            <InputNumber id="numeroMinutos" class="form-control" @bind-Value="@CorridaData.NumeroMinutos" />
        </div>

        <div class="form-group">
            <label for="id_competicao">ID da Competição:</label>
            <InputNumber id="id_competicao" class="form-control" @bind-Value="@CorridaData.Id_competicao" />
        </div>
        <div class="form-group">
            <label for="VideoYoutube">Link Video Youtube:</label>
            <InputText id="VideoYoutube" class="form-control" @bind-Value="@CorridaData.VideoYoutube" />
        </div>
        <button type="submit" class="btn btn-primary" @onclick="ModifyVideoLink">Atualizar</button>
    </EditForm>
}
else
{
    <p>Nenhuma corrida selecionada para edição.</p>
}


@code {
    [Parameter]
    public int Id { get; set; }

    Corrida CorridaData { get; set; } = new();
    Modal SuccessModal { get; set; }


    protected override async Task OnInitializedAsync()
    {


        try
        {
            CorridaData = await WebServiceAPI.GetCorrida(Id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            Console.WriteLine($"Erro na chamada da API: {ex.Message}");
            throw;
        }
    }

    private void ModifyVideoLink()
    {
        if (!string.IsNullOrEmpty(CorridaData.VideoYoutube))
        {
            CorridaData.VideoYoutube = ModifyYouTubeLink(CorridaData.VideoYoutube);
        }
    }

    private string ModifyYouTubeLink(string youtubeLink) 
    //Mais tarde arranjar uma maneira geral de conseguir cuidar de 
    // vários inputs diferentes, pois pode haver maiores enganos no input 
    // (por exemplo o input pode ser utube.com/xxxxx)
    {
        const string embedBaseUrl = "https://www.youtube.com/embed/";
        const string watchBaseUrl = "https://www.youtube.com/watch";
        const string liveBaseUrl = "https://www.youtube.com/live/";

        if (youtubeLink.StartsWith("www"))
        {
            youtubeLink = "https://" + youtubeLink;
        }
        else if (youtubeLink.StartsWith("youtube.com/"))
        {
            youtubeLink = "https://www." + youtubeLink;
        }

        if (youtubeLink.Contains(watchBaseUrl))
        {
            var uri = new Uri(youtubeLink);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            string videoId = query.Get("v");

            return embedBaseUrl + videoId;
        }
        else if (youtubeLink.Contains(liveBaseUrl))
        {
            string videoId = youtubeLink.Substring(liveBaseUrl.Length);

            return embedBaseUrl + videoId;
        }

        return youtubeLink;
    }

    public async void UpdateCorrida()
    {
        try
        {
            var updatedCorrida = new Corrida
                {
                    Circuito = CorridaData.Circuito,
                    Nome_Corrida = CorridaData.Nome_Corrida,
                    Data = CorridaData.Data,
                    Id_competicao = CorridaData.Id_competicao,
                    CarrosPermitidos = CorridaData.CarrosPermitidos,
                    Tipo_Pneus = CorridaData.Tipo_Pneus,
                    NumeroVoltas = CorridaData.NumeroVoltas,
                    NumeroMinutos = CorridaData.NumeroMinutos,
                    Id_Resultado = CorridaData.Id_Resultado,
                    IsDeleted = CorridaData.IsDeleted,
                    VideoYoutube = CorridaData.VideoYoutube
                };
            var response = await WebServiceAPI.UpdateCorrida(updatedCorrida, Id);

            if (response != null)
            {
                SuccessModal.OpenModal();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

}