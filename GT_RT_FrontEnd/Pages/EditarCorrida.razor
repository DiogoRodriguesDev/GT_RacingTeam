@page "/EditarCorrida/{id:int}"
@using ClassLibrary_GT_RT;
@using Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h2>Editar Corrida</h2>

@if (CorridaData != null)
{
    <h3>Editar Corrida</h3>

    <EditForm Model="@CorridaData" OnValidSubmit="UpdateCorrida">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="circuito">Circuito:</label>
            <InputText id="circuito" class="form-control" @bind-Value="@CorridaData.Circuito" />
        </div>

        <div class="form-group">
            <label for="data">Data:</label>
            <InputDate id="data" class="form-control" @bind-Value="@CorridaData.Data" />
        </div>

        <div class="form-group">
            <label for="id_competicao">ID da Competição:</label>
            <InputNumber id="id_competicao" class="form-control" @bind-Value="@CorridaData.Id_competicao" />
        </div>

        <div class="form-group">
            <label for="carrosPermitidos">Carros Permitidos:</label>
            <InputText id="carrosPermitidos" class="form-control" @bind-Value="@CorridaData.CarrosPermitidos" />
        </div>

        <div class="form-group">
            <label for="tipo_Pneus">Tipo de Pneus:</label>
            <InputText id="tipo_Pneus" class="form-control" @bind-Value="@CorridaData.Tipo_Pneus" />
        </div>

        <div class="form-group">
            <label for="numeroVoltas">Número de Voltas:</label>
            <InputNumber id="numeroVoltas" class="form-control" @bind-Value="@CorridaData.NumeroVoltas" />
        </div>

        <div class="form-group">
            <label for="numeroMinutos">Número de Minutos:</label>
            <InputNumber id="numeroMinutos" class="form-control" @bind-Value="@CorridaData.NumeroMinutos" />
        </div>

        <button type="submit" class="btn btn-primary">Atualizar</button>
    </EditForm>
}
else
{
    <p>Nenhuma corrida selecionada para edição.</p>
}


    @if (showAlert)
    {
        <div class="alert alert-primary" role="alert">
            Corrida atualizado com sucesso!
        </div>
        showAlert = false;
}

@code {
    [Parameter]
    public int Id { get; set; }

    Corrida CorridaData { get; set; } = new();


    bool showAlert = false;

    protected override async Task OnInitializedAsync()
    {


        try
        {
            CorridaData = await WebServiceAPI.GetCorrida(Id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            Console.WriteLine($"Erro na chamada da API: {ex.Message}");
            throw;
        }
    }



    public async void UpdateCorrida()
    {
        try
        {
            var updatedCorrida = new Corrida
                {
                    Circuito = CorridaData.Circuito,
                    Data = CorridaData.Data,
                    Id_competicao = CorridaData.Id_competicao,
                    CarrosPermitidos = CorridaData.CarrosPermitidos,
                    Tipo_Pneus = CorridaData.Tipo_Pneus,
                    NumeroVoltas = CorridaData.NumeroVoltas,
                    NumeroMinutos = CorridaData.NumeroMinutos,
                    Id_Resultado = CorridaData.Id_Resultado,
                    IsDeleted = CorridaData.IsDeleted
                };
            var response = await WebServiceAPI.UpdateCorrida(updatedCorrida, Id);

            if (response != null)
            {
                showAlert = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

}