@page "/CriarCorridas"
@using ClassLibrary_GT_RT;
@using Interfaces;
@using System.Diagnostics;
@using GT_RT_FrontEnd.Components;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<Modal @ref="SuccessModal" Title="Sucesso" Message="Corrida criada com sucesso!" />
<h2>Criar nova corrida</h2>

<EditForm Model="@NewCorrida" OnValidSubmit="CreateNewCorrida">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group">
        <label for="Nome_Corrida">Nome Corrida:</label>
        <InputText id="Nome_Corrida" class="form-control" @bind-Value="@NewCorrida.Nome_Corrida" />
    </div>
    <div class="form-group">
        <label for="circuito">Circuito:</label>
        <InputText id="circuito" class="form-control" @bind-Value="@NewCorrida.Circuito" />
    </div>

    <div class="form-group">
        <label for="carrosPermitidos">Carros Permitidos:</label>
        <InputText id="carrosPermitidos" class="form-control" @bind-Value="@NewCorrida.CarrosPermitidos" />
    </div>



    <div class="form-group">
        <label for="data">Data:</label>
        <InputDate id="data" class="form-control" @bind-Value="@NewCorrida.Data" />
    </div>


    <div class="form-group">
        <label for="numeroVoltas">Número de Voltas:</label>
        <InputNumber id="numeroVoltas" class="form-control" @bind-Value="@NewCorrida.NumeroVoltas" />
    </div>

    <div class="form-group">
        <label for="numeroMinutos">Número de Minutos:</label>
        <InputNumber id="numeroMinutos" class="form-control" @bind-Value="@NewCorrida.NumeroMinutos" />
    </div>

    <div class="form-group">
        <label for="id_competicao">ID da Competição:</label>
        <InputNumber id="id_competicao" class="form-control" @bind-Value="@NewCorrida.Id_competicao" />
    </div>

    <div class="form-group">
        <label for="VideoYoutube">Link Video Youtube:</label>
        <InputText id="VideoYoutube" class="form-control" @bind-Value="@NewCorrida.VideoYoutube" />
    </div>

    <button type="submit" class="btn btn-primary">Criar</button>
</EditForm>

<h2>Corridas</h2>

@if (CorridasData is not null && CorridasData.Any())
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>Data</th>
                <th>Circuito</th>
                <th>Carros Permitidos</th>
                <th>Tipo de Pneus</th>
                <th>Número de Voltas</th>
                <th>Número de Minutos</th>
                <th>Link Video Youtube</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var corrida in CorridasData)
            {
                <tr>
                    <td style="padding: 20px;"><a href="/corrida-details/@corrida.Id_corrida">@corrida.Nome_Corrida</a></td>
                    <td style="padding: 20px;">@corrida.Data</td>
                    <td style="padding: 20px;">@corrida.Circuito</td>
                    <td style="padding: 20px;">@corrida.CarrosPermitidos</td>
                    <td style="padding: 20px;">@corrida.Tipo_Pneus</td>
                    <td style="padding: 20px;">@corrida.NumeroVoltas</td>
                    <td style="padding: 20px;">@corrida.NumeroMinutos</td>
                    <td style="padding: 20px;">@corrida.VideoYoutube</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteCorrida(corrida.Id_corrida)">Deletar</button>
                        <button class="btn btn-primary" @onclick="() => EditCorrida(corrida.Id_corrida)">Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<Corrida> CorridasData { get; set; } = new();
    Corrida NewCorrida { get; set; } = new Corrida();
    Modal SuccessModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await WebServiceAPI.GetCorridas();
            CorridasData = response.Where(p => !p.IsDeleted).ToList();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task CreateNewCorrida()
    {
        try
        {
            var response = await WebServiceAPI.CreateCorrida(NewCorrida);
            CorridasData.Add(response);
            NewCorrida = new Corrida();

            if (response != null)
            {
                SuccessModal.OpenModal();
            }
            
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task DeleteCorrida(int id)
    {
        try
        {
            await WebServiceAPI.DeleteCorrida(id);
            CorridasData.RemoveAll(p => p.Id_corrida == id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
    private void EditCorrida(int id)
    {
        NavigationManager.NavigateTo($"/EditarCorrida/{id}");
    }
}