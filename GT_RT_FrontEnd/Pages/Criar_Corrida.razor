@page "/CriarCorridas"
@using ClassLibrary_GT_RT;
@using Interfaces;
@using System.Diagnostics;
@using GT_RT_FrontEnd.Components;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager


<div style="position: fixed; top: 50%; left: 50%; right 50%; transform: translate(-50%, -50%);">
    <ModalDelete @ref="DeleteModal" Title="Confirmação" ShowBackdrop="false" Message="Tem certeza de que deseja excluir esta corrida?" OnConfirm="DeleteCorrida" />
    <Modal @ref="SuccessModal" Title="Sucesso" Message="Corrida eliminada!" ShowBackdrop="false" />
</div>
<h2>Criar nova corrida</h2>

<EditForm Model="@NewCorrida" OnValidSubmit="CreateNewCorrida">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group col-sm-4">
        <label for="Nome_Corrida">Nome Corrida: (Nome da Competição - Ronda Numero - Categoria - Circuito)</label>
        <InputText id="Nome_Corrida" class="form-control" placeholder="OWS - Ronda 1 - PRO AM - TOKYO EXPRESSWAY" @bind-Value="@NewCorrida.Nome_Corrida" />
    </div>
    <div class="form-group col-sm-2">
        <label for="circuito">Circuito:</label>
        <InputText id="circuito" class="form-control" @bind-Value="@NewCorrida.Circuito" />
    </div>

    <div class="form-group col-sm-2">
        <label for="carrosPermitidos">Carros Permitidos:</label>
        <InputText id="carrosPermitidos" class="form-control" @bind-Value="@NewCorrida.CarrosPermitidos" />
    </div>    
    
    <div class="form-group col-sm-2">
        <label for="tipoPneus">Pneus Permitidos:</label>
        <InputText id="tipoPneus" class="form-control" @bind-Value="@NewCorrida.Tipo_Pneus" />
    </div>

    <div class="form-group col-sm-2">
        <label for="data">Data:</label>
        <InputDate id="data" class="form-control" @bind-Value="@NewCorrida.Data" />
    </div>


    <div class="form-group col-sm-2">
        <label for="numeroVoltas">Número de Voltas:</label>
        <InputNumber id="numeroVoltas" class="form-control" @bind-Value="@NewCorrida.NumeroVoltas" />
    </div>

    <div class="form-group col-sm-2">
        <label for="numeroMinutos">Número de Minutos:</label>
        <InputNumber id="numeroMinutos" class="form-control" @bind-Value="@NewCorrida.NumeroMinutos" />
    </div>

    <div class="form-group col-sm-4">
            <label for="id_corrida">Competição:</label>
            <InputSelect id="id_competicao" class="form-control" @bind-Value="@NewCorrida.Id_competicao">
                <option value="">Selecionar Competição</option>
            @foreach (var competicao in CompeticoesData)
                {
                    <option value="@competicao.Id">@competicao.Nome</option>
                }
            </InputSelect>
    </div>

    <label for="id_corrida">Competição:</label>
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Dropdown button
        </button>
        <ul class="dropdown-menu">
            <InputSelect id="id_competicao" class="form-control" @bind-Value="@NewCorrida.Id_competicao">
                <option value="">Selecionar Competição</option>
                @foreach (var competicao in CompeticoesData)
                {
                    <option value="@competicao.Id">@competicao.Nome</option>
                }
            </InputSelect>
        </ul>
    </div>

    <div class="form-group col-sm-4">
        <label for="VideoYoutube">Link Video Youtube:</label>
        <InputText id="VideoYoutube" class="form-control" @bind-Value="@NewCorrida.VideoYoutube" />
    </div>

    <button type="submit" class="btn btn-primary" @onclick="ModifyVideoLink">Criar</button>
    
</EditForm>

<Modal @ref="SuccessModal_CriarCorrida" Title="Sucesso" Message="Corrida criada com sucesso!" />
@if (showAlert)
{
    <div class="alert alert-danger" role="alert">
        Falta Selecionar uma competição!
    </div>


    showAlert = false;
}

<hr style="border-top: 20px solid #000;">
<h2>Corridas</h2>

@if (CorridasData is not null && CorridasData.Any())
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>Data</th>
                <th>Circuito</th>
                <th>Carros Permitidos</th>
                <th>Tipo de Pneus</th>
                <th>Número de Voltas</th>
                <th>Número de Minutos</th>
                <th>Link Video Youtube</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var corrida in CorridasData.OrderByDescending(x => x.Data))
            {
                <tr>
                    <td style="padding: 20px;"><a href="/corrida-details/@corrida.Id_corrida">@corrida.Nome_Corrida</a></td>
                    <td style="padding: 20px;">@corrida.Data?.ToString("dd/MM/yyyy")</td>
                    <td style="padding: 20px;">@corrida.Circuito</td>
                    <td style="padding: 20px;">@corrida.CarrosPermitidos</td>
                    <td style="padding: 20px;">@corrida.Tipo_Pneus</td>
                    <td style="padding: 20px;">@corrida.NumeroVoltas</td>
                    <td style="padding: 20px;">@corrida.NumeroMinutos</td>
                    <td style="padding: 20px;">@corrida.VideoYoutube</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteModal.OpenModal(corrida.Id_corrida)">Eliminar</button>

                        <button class="btn btn-primary" @onclick="() => EditCorrida(corrida.Id_corrida)">Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<Corrida> CorridasData { get; set; } = new();
    List<Competicao> CompeticoesData { get; set; } = new();
    Corrida NewCorrida { get; set; } = new Corrida();
    Modal SuccessModal { get; set; }
    Modal SuccessModal_CriarCorrida { get; set; }
    public ModalDelete DeleteModal { get; set; }
    bool showAlert = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await WebServiceAPI.GetCorridas();
            CorridasData = response.Where(p => !p.IsDeleted).ToList();

            var response1 = await WebServiceAPI.GetCompeticoes();
            CompeticoesData = response1.Where(p => !p.IsDeleted).ToList();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
    private void ModifyVideoLink()
    {
        if (!string.IsNullOrEmpty(NewCorrida.VideoYoutube))
        {
            NewCorrida.VideoYoutube = ModifyYouTubeLink(NewCorrida.VideoYoutube);
        }
    }

    private string ModifyYouTubeLink(string youtubeLink)
    //Mais tarde arranjar uma maneira geral de conseguir cuidar de
    // vários inputs diferentes, pois pode haver maiores enganos no input
    // (por exemplo o input pode ser utube.com/xxxxx)
    {
        const string embedBaseUrl = "https://www.youtube.com/embed/";
        const string watchBaseUrl = "https://www.youtube.com/watch";
        const string liveBaseUrl = "https://www.youtube.com/live/";

        if (youtubeLink.StartsWith("www"))
        {
            youtubeLink = "https://" + youtubeLink;
        }
        else if (youtubeLink.StartsWith("youtube.com/"))
        {
            youtubeLink = "https://www." + youtubeLink;
        }

        if (youtubeLink.Contains(watchBaseUrl))
        {
            var uri = new Uri(youtubeLink);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            string videoId = query.Get("v");

            return embedBaseUrl + videoId;
        }
        else if (youtubeLink.Contains(liveBaseUrl))
        {
            string videoId = youtubeLink.Substring(liveBaseUrl.Length);

            return embedBaseUrl + videoId;
        }

        return youtubeLink;
    }



    private async Task CreateNewCorrida()
    {
        try
        {
            if (NewCorrida.Id_competicao is null || NewCorrida.Id_competicao == 0)
            {
                showAlert = true;
                return;
            }

            var response = await WebServiceAPI.CreateCorrida(NewCorrida);
            CorridasData.Add(response);
            NewCorrida = new Corrida();

            if (response != null)
            {
                SuccessModal_CriarCorrida.OpenModal();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task DeleteCorrida(int id)
    {
        try
        {
            DeleteModal.CloseModal();
            await WebServiceAPI.DeleteCorrida(id);
            CorridasData.RemoveAll(p => p.Id_corrida == id);
            SuccessModal.OpenModal();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
    
    private void EditCorrida(int id)
    {
        NavigationManager.NavigateTo($"/EditarCorrida/{id}");
    }
}