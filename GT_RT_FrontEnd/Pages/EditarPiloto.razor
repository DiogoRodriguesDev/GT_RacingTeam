@page "/EditarPiloto/{id:int}"
@using ClassLibrary_GT_RT;
@using Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h2>Editar Piloto</h2>

@if (PilotoData is not null)
{
    <EditForm Model="@PilotoData" OnValidSubmit="UpdatePiloto">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Nome:</label>
            <InputText id="name" class="form-control" @bind-Value="@PilotoData.Nome" />
        </div>

        <div class="form-group">
            <label for="nickname">Nickname:</label>
            <InputText id="nickname" class="form-control" @bind-Value="@PilotoData.Nickname" />
        </div>

        <div class="form-group">
            <label for="descricao">Descrição:</label>
            <InputTextArea id="descricao" class="form-control" @bind-Value="@PilotoData.Descricao" />
        </div>

        <div class="form-group">
            <label for="idEquipa">ID da Equipa:</label>
            <InputNumber id="idEquipa" class="form-control" @bind-Value="@PilotoData.Id_Equipa" />
        </div>

        <div class="form-group">
            <label for="paisRegiao">País/Região:</label>
            <InputText id="paisRegiao" class="form-control" @bind-Value="@PilotoData.PaisRegiao" />
        </div>

        <div class="form-group">
            <label for="valor">Valor:</label>
            <InputNumber id="valor" class="form-control" @bind-Value="@PilotoData.Valor" />
        </div>


        <button type="submit" class="btn btn-primary">Atualizar</button>
    </EditForm>

    @if (showAlert)
    {
        <div class="alert alert-primary" role="alert">
            Piloto atualizado com sucesso!
        </div>
        showAlert = false;
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Piloto PilotoData { get; set; } = new();

    bool showAlert = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PilotoData = await WebServiceAPI.GetPiloto(Id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            Console.WriteLine($"Erro na chamada da API: {ex.Message}");
            throw;
        }
    }

    public async void UpdatePiloto()
    {
        try
        {
            var response = await WebServiceAPI.UpdatePiloto(PilotoData, Id);

            if (response is not null)
            {
                showAlert = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
}