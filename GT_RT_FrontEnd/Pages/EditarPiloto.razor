@page "/EditarPiloto/{id:int}"
@using ClassLibrary_GT_RT;
@using GT_RT_FrontEnd.Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using GT_RT_FrontEnd.Components;
@inject Utilities.ILocalStorage LocalStorage

@if (!isAdmin)
{
    <p>Acesso não autorizado.</p>
}
else
{
<Modal1 @ref="SuccessModal" Title="Sucesso" Message="Piloto editado com sucesso!" />
<h2>Editar Piloto</h2>

@if (PilotoData is not null)
{
    <EditForm Model="@PilotoData" OnValidSubmit="UpdatePiloto">
        <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

        <div class="form-group">
            <label for="name">Nome:</label>
            <InputText id="name" class="form-control" @bind-Value="@PilotoData.Nome" />
        </div>

        <div class="form-group">
            <label for="nickname">Nickname:</label>
            <InputText id="nickname" class="form-control" @bind-Value="@PilotoData.Nickname" />
        </div>

        <div class="form-group">
            <label for="descricao">Descricao:</label>
            <InputTextArea id="descricao" class="form-control" @bind-Value="@PilotoData.Descricao" />
        </div>

        <div class="form-group">
            <label for="idEquipa">ID da Equipa:</label>
            <InputNumber id="idEquipa" class="form-control" @bind-Value="@PilotoData.Id_Equipa" />
        </div>

        <div class="form-group">
            <label for="paisRegiao">País/Região:</label>
            <InputText id="paisRegiao" class="form-control" @bind-Value="@PilotoData.PaisRegiao" />
        </div>

        <div class="form-group">
            <label for="valor">Valor:</label>
            <InputNumber id="valor" class="form-control" @bind-Value="@PilotoData.Valor" />
        </div>

        <div class="form-group">
            <label for="categoriaId">Categoria:</label>
            <select id="categoriaId" class="form-control" @bind="@PilotoData.Id_Piloto_Categoria">
                @foreach (var categoria in ListaCategoriasPiloto)
                {
                    <option value="@categoria.Id_Piloto_Categorias">@categoria.Nome_Piloto_Categoria</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="foto">Foto:</label>
            <InputFile id="foto" class="form-control" OnChange="HandleFileChange" />
        </div>

        <button type="submit" class="btn btn-primary">Atualizar</button>
    </EditForm>


}
}
@code {
    [Parameter]
    public int Id { get; set; }

    Piloto PilotoData { get; set; } = new();

    public List<Piloto_Categorias> ListaCategoriasPiloto { get; set; } = new();
    private bool isAdmin = false;

    Modal1 SuccessModal { get; set; }




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var username = await LocalStorage.GetStringAsync("user");
            var password = await LocalStorage.GetStringAsync("password");

            isAdmin = username == "ADMINXXX" && password == "XXX123";

            if (isAdmin)
            {
                try
                {
                    PilotoData = await WebServiceAPI.GetPiloto(Id);
                    ListaCategoriasPiloto = await WebServiceAPI.GetCategorias();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex);
                    throw;
                }
            }

            StateHasChanged();
        }
    }
    //protected override async Task OnInitializedAsync()
    //{
    //    try
    //    {
    //        PilotoData = await WebServiceAPI.GetPiloto(Id);
    //        ListaCategoriasPiloto = await WebServiceAPI.GetCategorias();
    //    }
    //    catch (Exception ex)
    //    {
    //        Debug.WriteLine(ex);
    //        Console.WriteLine($"Erro na chamada da API: {ex.Message}");
    //        throw;
    //    }
    //}



    public async void UpdatePiloto()
    {
        try
        {
            var newPiloto = new Piloto
                {
                    Nome = PilotoData.Nome,
                    Nickname = PilotoData.Nickname,
                    Descricao = PilotoData.Descricao,
                    Id_Equipa = PilotoData.Id_Equipa,
                    PaisRegiao = PilotoData.PaisRegiao,
                    Valor = PilotoData.Valor,
                    Foto = PilotoData.Foto,
                    Id_Piloto_Categoria = PilotoData.Id_Piloto_Categoria
                };
            var response = await WebServiceAPI.UpdatePiloto(newPiloto, Id);

            if (response != null)
            {
                SuccessModal.OpenModal();
            }


        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using (var stream = file.OpenReadStream())
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                PilotoData.Foto = memoryStream.ToArray();
            }
        }
    }

}