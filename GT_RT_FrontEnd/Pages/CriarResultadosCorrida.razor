@page "/CriarResultadosCorrida"
@using ClassLibrary_GT_RT;
@using GT_RT_FrontEnd.Interfaces;
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Forms;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager
@using GT_RT_FrontEnd.Components;


<div style="position: fixed; top: 50%; left: 50%; right 50%; transform: translate(-50%, -50%);">
    <ModalDelete @ref="DeleteModal" Title="Confirmação" ShowBackdrop="false" Message="Tem certeza de que deseja excluir este resultado de corrida?" OnConfirm="DeleteResultadoCorrida" />
    <Modal @ref="SuccessModal" Title="Sucesso" Message="Resultado eliminado!" ShowBackdrop="false" />
</div>

<h2>Criar novo resultado de corrida</h2>
<EditForm Model="@NewResultadoCorrida" OnValidSubmit="CreateNewResultadoCorrida">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group col-sm-4">
        <div class="form-group">
            <label for="id_corrida">Corrida:</label>
            <InputSelect id="id_corrida" class="form-control" @bind-Value="@NewResultadoCorrida.Id_corrida">
            <option value="">Selecionar Corrida</option>
                @foreach (var corrida in Corridas)
                {
                    <option value="@corrida.Id_corrida">@corrida.Nome_Corrida</option>
                }
            </InputSelect>
        </div>

        
        <div class="form-group col-sm-4">
            <label for="posicaoFinal">Posição Final:</label>
            <select id="posicaoId" class="form-control" @bind="NewResultadoCorrida.PosicaoFinal">
                <option value="">Selecionar Posição</option>
                @for (int i = 1; i <= 20; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>



        <div class="form-group col-sm-4">
            <label for="pilotoId">Piloto:</label>
            <select id="pilotoId" class="form-control" @bind="NewResultadoCorrida.Id_piloto">
                <option value="">Selecionar Piloto</option>
                @foreach (var piloto in PilotosData)
                {
                    <option value="@piloto.Id_piloto">@piloto.Nome</option>
                }
            </select>
        </div>
    </div>


    <button type="submit" class="btn btn-primary">Criar</button>
</EditForm>

@if (showAlert)
{
    <div class="alert alert-success" role="alert">
        @showAlertMensage
    </div>
    showAlert = false;
}

@if (showAlertError)
{
    <div class="alert alert-danger" role="alert">
        @showAlertMensage
    </div>
    showAlertError = false;
}

<hr style="border-top: 20px solid #000;">

<h2>Resultados de Corrida</h2>
  

<div class="form-group col-sm-4">
    <label for="filtroCorrida">Filtrar por Corrida:</label>
    <select id="filtroCorrida" class="form-control" @bind="@filtroCorridaId">
        <option value="">Todos</option>
        @foreach (var corrida in Corridas)
        {
            <option value="@corrida.Id_corrida">@corrida.Nome_Corrida</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="FiltrarResultadosCorrida">Filtrar</button>
</div>
@if (ResultadosCorridaData is not null && ResultadosCorridaData.Any())
{
    <table>
        
            <tr>
                <th style="width: 150px;">Nome da Corrida</th>
                <th style="width: 150px;">Competição</th>
                <th style="width: 150px;">ID da Corrida</th>
                <th style="width: 150px;">ID do Piloto</th>
                <th style="width: 200px;">Nome do Piloto</th>
                <th style="width: 150px;">Posição Final</th>
                <th style="width: 100px;">Pontos</th>
                <th style="width: 100px;"></th>
            </tr>
        
    </table>
    <table>
        
            @foreach (var resultadoCorrida in ResultadosCorridaDataFiltrados)
            {
                <tr>
                    <td style="width: 150px; padding: 20px;">
                        @{
                            var corrida = Corridas.FirstOrDefault(c => c.Id_corrida == resultadoCorrida.Id_corrida);
                            
                            if (corrida != null)
                            {
                            <td style="padding: 20px;"><a href="@($"/corrida-details/{corrida.Id_corrida}")">@corrida.Nome_Corrida</a></td>
                            <td style="width: 150px; padding: 20px;">
                                    @{
                                        var competicao = Competicoes.FirstOrDefault(c => c.Id == corrida.Id_competicao);
                                        if (competicao != null)
                                        {
                                    <td style="padding: 20px;">@competicao.Nome</td>
                                        }
                                    }
                            </td>
                            <td style="width: 150px; padding: 20px;">@corrida.Id_competicao</td>
                            <td style="width: 150px; padding: 20px;">@resultadoCorrida.Id_corrida</td>
                            <td style="width: 200px; padding: 20px;">@resultadoCorrida.Id_piloto</td>
                            <td style="width: 150px; padding: 20px;">@resultadoCorrida.Nome_Piloto</td>
                            <td style="width: 100px; padding: 20px;">@resultadoCorrida.PosicaoFinal</td>
                            <td style="width: 100px; padding: 20px;">@resultadoCorrida.Pontos</td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => DeleteModal.OpenModal(resultadoCorrida.Id_ResultadoCorrida)">Eliminar</button>
                            </td>
                                }
                        }
                    
                    
                    
                    </td>
                </tr>
            }
       
    </table>
}
else
{
    <p>Nenhum resultado de corrida encontrado.</p>
}



@code {
    List<ResultadoCorrida> ResultadosCorridaData { get; set; } = new();
    ResultadoCorrida NewResultadoCorrida { get; set; } = new ResultadoCorrida();
    List<Corrida> Corridas { get; set; } = new();
    List<Piloto> PilotosData { get; set; } = new();
    List<ResultadoCorrida> ResultadosCorridaDataFiltrados { get; set; } = new();
    public int filtroCorridaId { get; set; }
    bool showAlert = false;
    bool showAlertError = false;
    public string showAlertMensage { get; set; }
    public ModalDelete DeleteModal { get; set; }
    Modal SuccessModal { get; set; }
    List<Competicao> Competicoes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await WebServiceAPI.GetPilotos();
            PilotosData = response.Where(p => !p.IsDeleted).ToList();

            var response1 = await WebServiceAPI.GetResultadoCorrida();
            ResultadosCorridaData = response1.Where(p => !p.IsDeleted).ToList();


            var response2 = await WebServiceAPI.GetCorridas();
            Corridas =  response2.Where(p => !p.IsDeleted).ToList();

            Competicoes = await WebServiceAPI.GetCompeticoes();

            FiltrarResultadosCorrida();

        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }


    private async Task CreateNewResultadoCorrida()
    {
        try
        {
            if (NewResultadoCorrida.PosicaoFinal == 0 || NewResultadoCorrida.PosicaoFinal is null ||
            NewResultadoCorrida.Id_piloto == 0 || NewResultadoCorrida.Id_piloto is null ||
            NewResultadoCorrida.Id_corrida == 0 || NewResultadoCorrida.Id_corrida is null) // Serve para que se o user nao selecionar nenhuma posição não dar erro.
            {
                
                showAlertMensage = "Falta Selecionar um dos campos!";
                showAlertError = true;
                return; // Não faz nada e não cria o piloto
            }

            var checkResultadoExistente = await WebServiceAPI.GetResultadoCorrida();
            if (checkResultadoExistente.Any(p => !p.IsDeleted && p.Id_piloto == NewResultadoCorrida.Id_piloto
                                                && p.Id_corrida == NewResultadoCorrida.Id_corrida))

            {
                showAlertMensage = "Este Piloto já tem resultado para esta corrida!";
                showAlertError = true;
                return;
            } 
            if (checkResultadoExistente.Any(p => !p.IsDeleted && p.Id_corrida == NewResultadoCorrida.Id_corrida
                                                && p.PosicaoFinal == NewResultadoCorrida.PosicaoFinal))
            {
                showAlertMensage = "Posição já atribuida";
                showAlertError = true;
                return;
            }


            NewResultadoCorrida.Nome_Piloto = PilotosData.FirstOrDefault(c => c.Id_piloto == NewResultadoCorrida.Id_piloto).Nome;
            NewResultadoCorrida.NickName = PilotosData.FirstOrDefault(c => c.Id_piloto == NewResultadoCorrida.Id_piloto).Nickname;
            var response = await WebServiceAPI.CreateResultadoCorrida(NewResultadoCorrida);
            ResultadosCorridaData.Add(response);
            NewResultadoCorrida = new ResultadoCorrida();

            if (response is not null)
            {
                showAlert = true;
                showAlertMensage = "Resultado criado com sucesso!";
            }
            FiltrarResultadosCorrida();
            
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }



    private async Task DeleteResultadoCorrida(int id)
    {
        try
        {
            DeleteModal.CloseModal();
            await WebServiceAPI.DeleteResultadoCorrida(id);
            ResultadosCorridaData.RemoveAll(p => p.Id_ResultadoCorrida == id);
            FiltrarResultadosCorrida();
            SuccessModal.OpenModal();
            
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private void FiltrarResultadosCorrida()
    {
        if (filtroCorridaId == 0)
        {
            ResultadosCorridaDataFiltrados = ResultadosCorridaData.OrderByDescending(r => r.Id_ResultadoCorrida).ToList();
        }
        else
        {
            ResultadosCorridaDataFiltrados = ResultadosCorridaData.Where(r => r.Id_corrida == filtroCorridaId).OrderByDescending(r => r.Id_ResultadoCorrida).ToList();
        }
    }
}
