@page "/CriarResultadosCorrida"
@using ClassLibrary_GT_RT;
@using Interfaces;
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Forms;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h2>Criar novo resultado de corrida</h2>

<EditForm Model="@NewResultadoCorrida" OnValidSubmit="CreateNewResultadoCorrida">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="id_corrida">ID da Corrida:</label>
        <InputNumber id="id_corrida" class="form-control" @bind-Value="@NewResultadoCorrida.Id_corrida" />
    </div>

    <div class="form-group">
        <label for="id_piloto">ID do Piloto:</label>
        <InputNumber id="id_piloto" class="form-control" @bind-Value="@NewResultadoCorrida.Id_piloto" />
    </div>

    <div class="form-group">
        <label for="posicaoFinal">Posição Final:</label>
        <InputNumber id="posicaoFinal" class="form-control" @bind-Value="@NewResultadoCorrida.PosicaoFinal" />
    </div>

    <div class="form-group">
        <label for="pontos">Pontos:</label>
        <InputNumber id="pontos" class="form-control" @bind-Value="@NewResultadoCorrida.Pontos" />
    </div>

    <button type="submit" class="btn btn-primary">Criar</button>
</EditForm>

<h2>Resultados de Corrida</h2>

@if (ResultadosCorridaData is not null && ResultadosCorridaData.Any())
{
    <table>
        <thead>
            <tr>
                <th>ID da Corrida</th>
                <th>ID do Piloto</th>
                <th>Posição Final</th>
                <th>Pontos</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resultadoCorrida in ResultadosCorridaData)
            {
                <tr>
                    <td style="padding: 20px;">@resultadoCorrida.Id_corrida</td>
                    <td style="padding: 20px;">@resultadoCorrida.Id_piloto</td>
                    <td style="padding: 20px;">@resultadoCorrida.PosicaoFinal</td>
                    <td style="padding: 20px;">@resultadoCorrida.Pontos</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteResultadoCorrida(resultadoCorrida.Id_ResultadoCorrida)">Deletar</button>
                        <button class="btn btn-primary" @onclick="() => EditResultadoCorrida(resultadoCorrida.Id_ResultadoCorrida)">Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Nenhum resultado de corrida encontrado.</p>
}

@code {
    List<ResultadoCorrida> ResultadosCorridaData { get; set; } = new();
    ResultadoCorrida NewResultadoCorrida { get; set; } = new ResultadoCorrida();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await WebServiceAPI.GetResultadoCorrida();
            ResultadosCorridaData = response.Where(p => !p.IsDeleted).ToList();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task CreateNewResultadoCorrida()
    {
        try
        {
            var response = await WebServiceAPI.CreateResultadoCorrida(NewResultadoCorrida);
            ResultadosCorridaData.Add(response);
            NewResultadoCorrida = new ResultadoCorrida();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task DeleteResultadoCorrida(int id)
    {
        try
        {
            await WebServiceAPI.DeleteResultadoCorrida(id);
            ResultadosCorridaData.RemoveAll(p => p.Id_ResultadoCorrida == id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private void EditResultadoCorrida(int id)
    {
        NavigationManager.NavigateTo($"/EditarResultadoCorrida/{id}");
    }
}