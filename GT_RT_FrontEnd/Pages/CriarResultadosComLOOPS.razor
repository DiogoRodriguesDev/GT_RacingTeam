@*@page "/CriarResultadosCorrida"
@using ClassLibrary_GT_RT;
@using Interfaces;
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Forms;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h2>Criar novo resultado de corrida</h2>

<EditForm Model="@NewResultadoCorridaModel" OnValidSubmit="CreateNewResultadoCorrida">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="id_corrida">Selecione a Corrida:</label>
        <InputSelect id="id_corrida" class="form-control" @bind-Value="@NewResultadoCorridaModel.Id_corrida">
            @foreach (var corrida in Corridas)
            {
                <option value="@corrida.Id_corrida">@corrida.Nome_Corrida</option>
            }
        </InputSelect>
    </div>

    @for (int i = 0; i < NewResultadoCorridaModel.ResultadosCorrida.Length; i++)
    {
        if (i < NewResultadoCorridaModel.ResultadosCorrida.Length && NewResultadoCorridaModel.ResultadosCorrida[i] == null)
        {
            NewResultadoCorridaModel.ResultadosCorrida[i] = new ResultadoCorrida();
        }

        <div class="form-group">
            <label for="@($"piloto{i}")">@($"{i + 1}º Lugar")</label>
            <InputSelect id="@($"piloto{i}")" class="form-control" @bind-Value="@NewResultadoCorridaModel.ResultadosCorrida[i].Id_piloto">
                @foreach (var piloto in PilotosData)
                {
                    <option value="@piloto.Id_piloto">@piloto.Nome</option>
                }
            </InputSelect>
        </div>
    }


    <button type="submit" class="btn btn-primary">Criar</button>
</EditForm>

@code {
    List<ResultadoCorrida> ResultadosCorridaData { get; set; } = new();
    List<Piloto> PilotosData { get; set; } = new();
    List<Corrida> Corridas { get; set; } = new();
    ResultadoCorridaModel NewResultadoCorridaModel { get; set; } = new ResultadoCorridaModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PilotosData = (await WebServiceAPI.GetPilotos()).Where(p => !p.IsDeleted).ToList();
            Corridas = await WebServiceAPI.GetCorridas();
            ResultadosCorridaData = (await WebServiceAPI.GetResultadoCorrida()).Where(p => !p.IsDeleted).ToList();
            NewResultadoCorridaModel = new ResultadoCorridaModel
                {
                    ResultadosCorrida = new ResultadoCorrida[16]
                };

            for (int i = 0; i < 16; i++)
            {
                NewResultadoCorridaModel.ResultadosCorrida[i] = new ResultadoCorrida { PosicaoFinal = i + 1 };
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
    private async Task CreateNewResultadoCorrida()
    {
        try
        {
            foreach (var resultadoCorrida in NewResultadoCorridaModel.ResultadosCorrida)
            {
                var response = await WebServiceAPI.CreateResultadoCorrida(resultadoCorrida);
                ResultadosCorridaData.Add(response);
            }
            for (int i = 0; i < 16; i++)
            {
                NewResultadoCorridaModel.ResultadosCorrida[i] = new ResultadoCorrida { PosicaoFinal = i + 1 };
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task DeleteResultadoCorrida(int id)
    {
        try
        {
            await WebServiceAPI.DeleteResultadoCorrida(id);
            ResultadosCorridaData.RemoveAll(p => p.Id_ResultadoCorrida == id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private void EditarResultadoCorrida(int id)
    {
        NavigationManager.NavigateTo($"/EditarResultadoCorrida/{id}");
    }
}*@