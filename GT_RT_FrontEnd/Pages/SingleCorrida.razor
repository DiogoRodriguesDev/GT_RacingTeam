@page "/Corrida-details/{id:int}"

@using ClassLibrary_GT_RT
@using GT_RT_FrontEnd.Interfaces
@using System.Diagnostics
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager


@if (Corrida != null)
{
    <h3>@Corrida.Nome_Corrida</h3>
    <p><strong>ID da Corrida:</strong> @Corrida.Id_corrida</p>
    <p><strong>Data:</strong> @Corrida.Data?.ToString("dd/MM/yyyy")</p>
    <p><strong>Carros Permitidos:</strong> @Corrida.CarrosPermitidos</p>
    <p><strong>Tipo de Pneus:</strong> @Corrida.Tipo_Pneus</p>
    <p><strong>Número de Voltas:</strong> @Corrida.NumeroVoltas</p>
    <p><strong>Número de Minutos:</strong> @Corrida.NumeroMinutos</p>

    @if (!string.IsNullOrEmpty(Corrida.VideoYoutube))
    {
        <div class="video-container">
            <iframe src="@Corrida.VideoYoutube" frameborder="0" allowfullscreen style="width: 50%; height: 500px;"></iframe>
        </div>
    }

    <h2>Resultados da Corrida</h2>
    @if (ResultadosCorrida != null && ResultadosCorrida.Any())
    {
        <table class="table" style="width: 50%;">
            <thead>
                <tr>
                    <th>Posição Final</th>
                    <th>Nome</th>
                    <th>NickName</th>
                    <th>Pontos</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var resultado in ResultadosCorrida)
                {
                    <tr>
                        <td>@resultado.PosicaoFinal</td>
                        <td><a href="/piloto-details/@resultado.Id_piloto">@resultado.Nome_Piloto</a></td>
                        <td>@resultado.NickName</td>
                        <td>@resultado.Pontos</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Nenhum resultado de corrida para esta corrida.</p>
    }

}
else
{
    <p>A corrida não foi encontrada.</p>
}



@code {
    [Parameter]
    public int Id { get; set; }
    private Corrida Corrida { get; set; }
    private List<ResultadoCorrida> ResultadosCorrida { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Corrida = await WebServiceAPI.GetCorrida(Id);
            ResultadosCorrida = (await WebServiceAPI.GetResultadoCorrida())
                                .Where(r => !r.IsDeleted)
                                .Where(r => r.Id_corrida == Corrida.Id_corrida)
                                .OrderBy(r => r.PosicaoFinal)
                                .ToList();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
}