@page "/CriarPilotos"
@using ClassLibrary_GT_RT;
@using Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h2>Criar novo piloto</h2>

<EditForm Model="@NewPiloto" OnValidSubmit="CreateNewPiloto">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Nome:</label>
        <InputText id="name" class="form-control" @bind-Value="@NewPiloto.Nome" />
    </div>

    <div class="form-group">
        <label for="nickname">Nickname:</label>
        <InputText id="nickname" class="form-control" @bind-Value="@NewPiloto.Nickname" />
    </div>

    <div class="form-group">
        <label for="description">Descrição:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@NewPiloto.Descricao" />
    </div>

    <div class="form-group">
        <label for="idEquipa">ID da Equipa:</label>
        <InputNumber id="idEquipa" class="form-control" @bind-Value="@NewPiloto.Id_Equipa" />
    </div>

    <div class="form-group">
        <label for="paisRegiao">País/Região:</label>
        <InputText id="paisRegiao" class="form-control" @bind-Value="@NewPiloto.PaisRegiao" />
    </div>

    <div class="form-group">
        <label for="valor">Valor:</label>
        <InputNumber id="valor" class="form-control" @bind-Value="@NewPiloto.Valor" />
    </div>

    <div class="form-group">
        <label for="categoriaId">Categoria:</label>
        <select id="categoriaId" class="form-control" @bind="@NewPiloto.Id_Piloto_Categoria">
            @foreach (var categoria in ListaCategoriasPiloto)
            {
                <option value="@categoria.Id_Piloto_Categorias">@categoria.Nome_Piloto_Categoria</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="equipaId">Equipa:</label>
        <select id="equipaId" class="form-control" @bind="@NewPiloto.Id_Equipa">
            @foreach (var Equipa in ListaEquipasPiloto)
            {
                <option value="@Equipa.Id">@Equipa.Nome</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Criar</button>
</EditForm>

<hr>

<h2>Pilotos</h2>

@if (PilotosData is not null && PilotosData.Any())
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>NickName</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var piloto in PilotosData)
            {
                <tr>
                    <td style="padding: 20px;">@piloto.Nome</td>
                    <td style="padding: 20px;">@piloto.Nickname</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeletePiloto(piloto.Id_piloto)">Deletar</button>
                        <button class="btn btn-primary" @onclick="() => EditPiloto(piloto.Id_piloto)">Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}





@code {
    List<Piloto> PilotosData { get; set; } = new();
    Piloto NewPiloto { get; set; } = new Piloto();
    public List<Piloto_Categorias> ListaCategoriasPiloto { get; set; } = new();

    public List<Equipa> ListaEquipasPiloto { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await WebServiceAPI.GetPilotos();
            PilotosData = response.Where(p => !p.IsDeleted).ToList();
            ListaCategoriasPiloto = await WebServiceAPI.GetCategorias();
            ListaEquipasPiloto = await WebServiceAPI.GetEquipas();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task CreateNewPiloto()
    {
        try
        {
            var response = await WebServiceAPI.CreatePiloto(NewPiloto);
            PilotosData.Add(response);
            NewPiloto = new Piloto();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task DeletePiloto(int id)
    {
        try
        {
            await WebServiceAPI.DeletePiloto(id);
            PilotosData.RemoveAll(p => p.Id_piloto == id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
    private void EditPiloto(int id)
    {
        NavigationManager.NavigateTo($"/EditarPiloto/{id}");
    }
}