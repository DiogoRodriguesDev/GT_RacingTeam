@page "/CriarPilotos"
@using ClassLibrary_GT_RT;
@using GT_RT_FrontEnd.Interfaces;
@using System.Diagnostics;
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using GT_RT_FrontEnd.Components;
@inject IAuthorizationService AuthorizationService
@using Microsoft.AspNetCore.Components.Authorization
@inject Utilities.ILocalStorage LocalStorage

@if (!isAdmin)
{
    <p>Acesso não autorizado.</p>
}
else
{
<div style="position: fixed; top: 50%; left: 50%; right 50%; transform: translate(-50%, -50%);">
    <ModalDelete @ref="DeleteModal" Title="Confirmacao" ShowBackdrop="false" Message="Tem certeza de que deseja excluir este Piloto?" OnConfirm="DeletePiloto" />
    <Modal1 @ref="SuccessModal" Title="Sucesso" Message="Piloto eliminado!" ShowBackdrop="false" />
</div>

<h2>Criar novo piloto</h2>

<EditForm Model="@NewPiloto" OnValidSubmit="CreateNewPiloto">
    <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

    <div class="form-group col-sm-2">
        <label for="name">Nome:</label>
            <InputText id="name" class="form-control bg-transparent" style="color: white;" @bind-Value="@NewPiloto.Nome" />
    </div>

    <div class="form-group col-sm-2">
        <label for="nickname">Nickname:</label>
            <InputText id="nickname" class="form-control bg-transparent" style="color: white;" @bind-Value="@NewPiloto.Nickname" />
    </div>

    <div class="form-group col-sm-2">
        <label for="foto">Foto:</label>
            <InputFile id="foto" class="form-control bg-transparent" style="color: white;" OnChange="HandleFileChange" />
    </div>

    <div class="form-group col-sm-2">
        <label for="description">Descricao:</label>
            <InputTextArea id="description" class="form-control bg-transparent" style="color: white;" @bind-Value="@NewPiloto.Descricao" />
    </div>

    <div class="form-group col-sm-2">
        <label for="paisRegiao">País/Região:</label>
            <InputText id="paisRegiao" class="form-control bg-transparent" style="color: white;" @bind-Value="@NewPiloto.PaisRegiao" />
    </div>

    <div class="form-group col-sm-2">
        <label for="valor">Valor:</label>
            <InputNumber id="valor" class="form-control bg-transparent" style="color: white;" @bind-Value="@NewPiloto.Valor" />
    </div>

    <div class="form-group col-sm-2">
        <label for="categoriaId">Categoria:</label>
            <select id="categoriaId" class="form-control bg-transparent" style="color: white;" @bind="@NewPiloto.Id_Piloto_Categoria">
                <option class="bg-black" value="">Selecionar Categoria</option>
            @foreach (var categoria in ListaCategoriasPiloto)
            {
                <option class="bg-black"  value="@categoria.Id_Piloto_Categorias">@categoria.Nome_Piloto_Categoria</option>
            }
        </select>
    </div>


    <div class="form-group col-sm-2">
        <label for="equipaId">Equipa:</label>

            <select id="equipaId" class="form-control bg-transparent" style="color: white;" @bind="@NewPiloto.Id_Equipa">
                

            @foreach (var Equipa in ListaEquipasPiloto)

            {
                <option class="bg-black" value="@Equipa.Id">@Equipa.Nome</option>
            }
        </select>
    </div>



    <Modal1 @ref="SuccessModal_criadopiloto" Title="Sucesso" Message="Piloto criado com sucesso!" />

        <button type="submit" class="btn btn-success">Criar</button>
</EditForm>

<hr style="border-top: 20px solid #000;">

<h2>Pilotos</h2>

@if (PilotosData is not null && PilotosData.Any())
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>NickName</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var piloto in PilotosData)
            {
                <tr>
                    <a style="padding: 5px;" href="@($"/piloto-details/{piloto.Id_piloto}")">@piloto.Nome</a>
                    <td style="padding: 5px;">@piloto.Nickname</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteModal.OpenModal(piloto.Id_piloto)">Eliminar</button>
                        <button class="btn btn-primary" @onclick="() => EditPiloto(piloto.Id_piloto)">Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}




}
@code {
    List<Piloto> PilotosData { get; set; } = new();
    Piloto NewPiloto { get; set; } = new Piloto();
    public List<Piloto_Categorias> ListaCategoriasPiloto { get; set; } = new();
    public List<Equipa> ListaEquipasPiloto { get; set; } = new();
    Modal1 SuccessModal { get; set; }
    Modal1 SuccessModal_criadopiloto { get; set; }
    public ModalDelete DeleteModal { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool isAdmin = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var username = await LocalStorage.GetStringAsync("user");
            var password = await LocalStorage.GetStringAsync("password");

            isAdmin = username == "ADMINXXX" && password == "XXX123";

            if (isAdmin)
            {
                try
                {
                    var response = await WebServiceAPI.GetPilotos();
                    PilotosData = response.Where(p => !p.IsDeleted).OrderByDescending(p => p.Id_piloto).ToList();
                    ListaCategoriasPiloto = await WebServiceAPI.GetCategorias();
                    ListaEquipasPiloto = await WebServiceAPI.GetEquipas();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex);
                    throw;
                }
            }

            StateHasChanged();
        }
    }

    private async Task CreateNewPiloto()
    {
        try
        {
            if (NewPiloto.Id_Piloto_Categoria == 0 || NewPiloto.Id_Piloto_Categoria is null) //caso o utilizador não escolha nenhuma opcao
            {
                NewPiloto.Id_Piloto_Categoria = 1;// "1" na minha db é Sem Categoria na tabela Pilot_Categorias
            }
            if (NewPiloto.Id_Equipa == 0)
            {
                NewPiloto.Id_Equipa = 1;// "1" na minha db é GT3 Racing Team na tabela Equipas (DB PTISP SQL)
            }
            NewPiloto.Inativo = false;
            var response = await WebServiceAPI.CreatePiloto(NewPiloto);
            PilotosData.Add(response);
            NewPiloto = new Piloto();

            if (response != null)
            {
                SuccessModal_criadopiloto.OpenModal();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private async Task DeletePiloto(int id)
    {
        try
        {
            DeleteModal.CloseModal();
            await WebServiceAPI.DeletePiloto(id);
            PilotosData.RemoveAll(p => p.Id_piloto == id);
            SuccessModal.OpenModal();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    private void EditPiloto(int id)
    {
        NavigationManager.NavigateTo($"/EditarPiloto/{id}");
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using (var stream = file.OpenReadStream())
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                NewPiloto.Foto = memoryStream.ToArray();
            }
        }
    }
}