@*@inherits LayoutComponentBase

<PageTitle>GT_RT_FrontEnd</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>*@

@using ClassLibrary_GT_RT
@using GT_RT_FrontEnd.Interfaces
@using System.Diagnostics
@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase


@using System.Threading.Tasks
@inject Utilities.ILocalStorage LocalStorage

<CascadingValue Value="this">



<PageTitle>GT_RT_FrontEnd</PageTitle>

<div class="page">
    <main>
        <nav class="navbar navbar-fixed navbar-dark bg-dark ">
            <div class="container-fluid ">
                <div class="row align-items-center">

                    <div class="col-auto">

                            <img src="https://drive.google.com/uc?id=1KjJ9znerXytfn3yTf6oeAHQ7zp-19CKN" alt="Foto do Piloto" style="max-width: 60px; max-height: 100px;" />


                    </div>
                 
                    <div class="col-auto px-3">

                            <NavLink class="nav-link text-white letrasSFNIGHT" href="" Match="NavLinkMatch.All">
                            <i class="bi bi-person-fill me-1"></i> Pilotos
                        </NavLink>
                    </div>

                    <div class="col-auto px-3">
                            <NavLink class="nav-link text-white letrasSFNIGHT" href="/ListaDeCorridas">
                            <i class="bi bi-ev-front-fill me-1"></i> Corridas
                        </NavLink>
                    </div>

                    <div class="col-auto px-3">
                            <NavLink class="nav-link text-white letrasSFNIGHT" href="/ListaDeCompeticoes">
                            <i class="bi bi-trophy-fill me-1"></i> Competicoes
                        </NavLink>
                        
                    </div>

                    <div class="col-auto px-2">
                        <NavLink class="nav-link text-white">
                            <button @onclick="ScrollToBottom"></button>
                        </NavLink>
                    </div>
                        <div class="col-auto">
                            <img src="https://drive.google.com/uc?id=1XE1tmmfTgxsJbiQbfVUDHSEvvFGY5RYX" alt="Foto do Piloto" style="max-width: 80px; max-height: 100px;" />
                            
                        </div>
                </div>
               
                    <div style="width:70px;text-align:right;">
                        @if (loggedIn)
                        {
                            <a class="btn btn-sm btn-primary text-white" title="Account" href="account"><span class="oi oi-key"></span></a>
                            <button class="btn btn-sm btn-danger" title="Logout" @onclick="Logout"><span class="oi oi-account-logout"></span></button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-success" title="Login" @onclick="OpenLogin"><span class="oi oi-account-login"></span></button>
                        }
                    </div>
   
                </div>
        </nav>
        <article class="content px-4 text-white font-monospace">

             <div class="align-content-center">
                @Body
            </div>

            <div class=" top-row px-4 bg-transparent ">


                    @*<img src="data:image;base64,@Convert.ToBase64String(FotoPiloto)" alt="Foto do Piloto" style="max-width: 140px; max-height: 100px;" />*@
                        <img src="https://drive.google.com/uc?id=1KjJ9znerXytfn3yTf6oeAHQ7zp-19CKN" alt="Foto do Piloto" style="max-width: 140px; max-height: 100px;" />

            </div>
        </article>

            <nav class="navbar navbar-fixed navbar-dark bg-dark">
                    
                        <div class="container-fluid ">
                            <div class="container-fluid ">
                                @if (isAdmin)
                                {
                                    <div class="col-auto px-3">
                                <NavLink class="nav-link text-white letrasSFNIGHT" href="/CriarPilotos">
                                            <i class="fa-sharp fa-solid fa-user-plus me-2" style="color: #1d9064;"></i> Manage Pilotos
                                        </NavLink>
                                    </div>

                                    <div class="col-auto px-3">
                                <NavLink class="nav-link text-white letrasSFNIGHT" href="/CriarResultadosCorrida">
                                            <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Resultados
                                        </NavLink>
                                    </div>

                                    <div class="col-auto px-3">
                                <NavLink class="nav-link text-white letrasSFNIGHT" href="/CriarCorridas">
                                            <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Corridas
                                        </NavLink>
                                    </div>

                                    <div class="col-auto px-3">
                                        <NavLink class="nav-link text-white" href="/CriarCompeticao">
                                            <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Competicoes
                                        </NavLink>
                                    </div>
                                }
                         </div>
                    </div>
              </nav>
    </main>
</div>

</CascadingValue>


<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login Form</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="loginEmail" class="form-label">Nome</label>
                    <input type="email" class="form-control" id="loginEmail" placeholder="Nome ou NickName" autocomplete="off" required @bind-value="user" />
                </div>
                <div class="mb-3">
                    <label for="loginPassword" class="form-label">Password</label>
                    <input type="password" class="form-control" id="loginPassword" required @bind-value="loginPassword" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="Login">Login</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>


@code {



  
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await LocalStorage.GetStringAsync("user");
            loggedIn = !string.IsNullOrEmpty(user);
            StateHasChanged();
        }
    }


    private bool show, display, loggedIn;
    private string? user;

    public string? GetUserName()
    {
        return loggedIn ? user : null;
    }

    public async Task OpenLogin()
    {
        display = true;
        await Task.Delay(100);
        show = true;
    }

    public async Task Logout()
    {
        user = null;
        loggedIn = false;
        await LocalStorage.RemoveAsync("user");
    }

    private async Task Close()
    {
        show = false;
        await Task.Delay(500);
        display = false;
    }



    private bool isAdmin = false;
    private string loginPassword { get; set; }
    private async Task Login()
        {
        if (!string.IsNullOrEmpty(user))
        {
            if (user == "ADMINXXX" && loginPassword == "XXX123")
            {
                isAdmin = true;
            }

            await Close();
            loggedIn = true;
            await LocalStorage.SaveStringAsync("user", user);
            await LocalStorage.SaveStringAsync("password", loginPassword);
        }
        }





    private bool showNavMenu = false;
    private string NavCssClass => showNavMenu ? "" : "hidden";

    private void ToggleNavMenu()
    {
        showNavMenu = !showNavMenu;
    }




   [Inject]
   IJSRuntime JS { get; set; }

    private async Task ScrollToBottom()
        {
            await JS.InvokeVoidAsync("scrollToBottom");
        }
    
}
